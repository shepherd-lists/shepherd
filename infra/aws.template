Description: "Deploys the shepherd networks stack"

Resources:

  ShepherdVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: vpc-shepherd
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShepherdVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: shepherd-subnet1
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShepherdVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: shepherd-subnet2
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShepherdVPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: shepherd-subnet3
# DB subnet group to be passed to rds          
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: shepherd-dbsubnetgroup
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      DBSubnetGroupName: shepherd-dbsubnetgroup
  
# security group to be passed to docker and rds
  ShepherdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Shepherd default SG"
      VpcId: !Ref ShepherdVPC
      GroupName: shepherd-default-sg
  DefaultSecurityGroupIngress5432:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ShepherdSecurityGroup
      SourceSecurityGroupId: !Ref ShepherdSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
  DefaultSecurityGroupIngress84:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ShepherdSecurityGroup
      SourceSecurityGroupId: !Ref ShepherdSecurityGroup
      IpProtocol: tcp
      FromPort: 84
      ToPort: 84
      
# some router/gateway boilerplate
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: shepherd-internet-gw
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref ShepherdVPC
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ShepherdVPC
      Tags:
        - Key: Name
          Value: shepherd-route-table
  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  RouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable
  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  # # Needed to connect to EIP
  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Type: application
  #     Scheme: internet-facing
  #     SecurityGroups:
  #     - !Ref ShepherdSecurityGroup
  #     Subnets:
  #     - !Ref Subnet1
  #     - !Ref Subnet2
  #     - !Ref Subnet3
  #     Tags:
  #     - Key: net.arweave.hosted.projects
  #       Value: shepherd

  ShepherdPgdb:
    Type: AWS::RDS::DBInstance
    # had to add this DependsOn as AWS was not picking up the reference later. bug?
    DependsOn: DBSubnetGroup
    # DeletionPolicy: Retain
    # UpdateReplacePolicy: Retain
    Properties:
      DBInstanceIdentifier: shepherd-pgdb
      VPCSecurityGroups:
        - Ref: ShepherdSecurityGroup
      DBSubnetGroupName: 
        Ref: DBSubnetGroup
      AllocatedStorage: 40
      DBInstanceClass: "db.t3.xlarge"
      StorageType: gp2
      Engine: postgres
      EngineVersion: "13.3"
      # DeleteAutomatedBackups: false
      DBName: arblacklist
      MasterUsername: postgres
      MasterUserPassword: postgres
      Tags:
        - Key: Project
          Value: "shepherd RDS PostgreSQL"
  
  # shepherd-feeder-q
  SQSFeederQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: shepherd-feeder-q
      MessageRetentionPeriod: 1209600 # 14 days (AWS max value)
      VisibilityTimeout: 900 # 15 minutes
      # RedrivePolicy:
      #   deadLetterTargetArn: !GetAtt SQSInputQueueDLQ.Arn
      #   maxReceiveCount: 10

  # AWS_INPUT_BUCKET
  # Policies for S3Bucket access done in docker compose also
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Join ['', ['shepherd-mod-input-', Ref: AWS::Region]]
      NotificationConfiguration:
        QueueConfigurations:
          - Queue: !GetAtt SQSInputQueue.Arn 
            Event: 's3:ObjectCreated:*'
  SQSInputQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days (AWS max value)
      QueueName: shepherd-input-dlq
  SQSInputQueueDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSInputQueueDLQ
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - Ref: AWS::AccountId
            Action: 'sqs:*'
            Resource: !GetAtt SQSInputQueueDLQ.Arn
  # AWS_SQS_INPUT_QUEUE
  SQSInputQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: shepherd-input-q
      MessageRetentionPeriod: 1209600 # 14 days (AWS max value)
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSInputQueueDLQ.Arn
        maxReceiveCount: 10
  SQSInputQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 
              - 'SQS:SendMessage'
            Resource: !GetAtt SQSInputQueue.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - shepherd-mod-input
                    - '-'
                    - Ref: AWS::Region
          - Effect: Allow
            Principal: 
              AWS:
                - Ref: AWS::AccountId
            Action: 
              - 'SQS:*'
            Resource: !GetAtt SQSInputQueue.Arn
      Queues:
        - !Ref SQSInputQueue 

Outputs:

  AwsAccountId:
    Value: !Ref AWS::AccountId

  ShepherdVPC:
    Description: ShepherdVPC
    Value: !Ref ShepherdVPC

  ShepherdSecurityGroup:
    Description: ShepherdSecurityGroup
    Value: !Ref ShepherdSecurityGroup

  RdsEndpointUrl:
    Description: "DB_HOST Endpoint of the newly created RDS PostgreSQL"
    Value: !GetAtt ShepherdPgdb.Endpoint.Address

  SQSFeederQueue:
    Value: !GetAtt SQSFeederQueue.QueueUrl

  S3Bucket:
    Description: "shepherd-safer S3Bucket for Safer inputs"
    Value: !Ref S3Bucket

  SQSInputQueue:
    Value: !Ref SQSInputQueue

  Subnet1:
    Value: !Ref Subnet1
  Subnet2:
    Value: !Ref Subnet2
  Subnet3:
    Value: !Ref Subnet3

  RouteTable:
    Value: !Ref RouteTable

  # LoadBalancerArn:
  #   Value: !Ref LoadBalancer
  # LoadBalancerDnsName:
  #   Value: !GetAtt LoadBalancer.DNSName
